import { describe, it, expect ,vi } from "vitest";
import { prismaClient } from "../__mocks__/db";
import request from "supertest"
import { app } from "..";

vi.mock("../db")
vi.mock("../utils/user")

// when enabled this mock for utils/user, it will override the
// __mocks__/index.ts file with undefined value
// while disabling it will give you the real value got printed from __mocks__/index.ts

describe("POST /sum", () => {

  it("should return the sum of two numbers", async () => {
    // 2-  mocking prismaClient request create method to return some specific value
    prismaClient.request.create.mockResolvedValue({
      id: 12,
      a: 5,
      b: 7,
      answer: 12,
      type: "sum",
    });

    // 3- spying on the create method of prismaClient request
    vi.spyOn(prismaClient.request, "create");

    // 1- simple testing to check working of mocking with request from supertest
    const response = await request(app).post("/sum").send({
      a: 5,
      b: 7,
    });

    // 3- asserting that our mock was called with specific values by spying on it
    // don't pass id here as it is auto generated by prisma mock else will see error
    expect(prismaClient.request.create).toHaveBeenCalledWith({
      data: {
        a: 5,
        b: 7,
        answer: 12,
        type: "sum",
      },
    });

    expect(response.statusCode).toBe(200);
    
    // 2- asserting the response to have the mocked values
    expect(response.body.id).toBe(12);
    expect(response.body.answer).toBe(12);
  });

  it("should return failure due to some larger number", async () => {
    const response = await request(app).post("/sum").send({
      a: 8347983274827483,
      b: 7,
    });
    expect(response.statusCode).toBe(422);
    expect(response.body.answer).toBe("Cannot support larger numbers");
  });

  it("should return failure due to some larger number", async () => {
    const response = await request(app).post("/sum").send({
      a: 8,
      b: 347983274827483,
    });
    expect(response.statusCode).toBe(422);
    expect(response.body.answer).toBe("Cannot support larger numbers");
  });
});



describe("POST /product",()=>{
  it("should return the product of two numbers", async () => {
    const response = await request(app).post("/product").send({
      a: 5,
      b: 7,
    });
    expect(response.statusCode).toBe(200);
    expect(response.body.answer).toBe(35);
  });

  it("should return if one number is negative", async () => {
    const response = await request(app).post("/product").send({
      a: -2,
      b: 5000,
    });
    expect(response.statusCode).toBe(200);
    expect(response.body.answer).toBe(-10000);
  });
})